pipeline {
    agent any

    environment {
        IMAGE_NAME    = "bm106/aspu-api"
        SONARQUBE_ENV = "sonar"
        DOCKER_CREDS  = "dockerhub"
        KUBE_SERVER   = 'https://167.86.111.168:6443'
        KUBE_NAMESPACE = 'default'
    }

    stages {

        stage('Configure Kubeconfig') {
            steps {
                withCredentials([string(credentialsId: 'k3s-jenkins-token-new', variable: 'KUBE_TOKEN')]) {
                    sh '''
                    mkdir -p ~/.kube
                    cat <<EOF > ~/.kube/config
apiVersion: v1
kind: Config
clusters:
- cluster:
    server: ${KUBE_SERVER}
    insecure-skip-tls-verify: true
  name: k3s
contexts:
- context:
    cluster: k3s
    namespace: ${KUBE_NAMESPACE}
    user: jenkins
  name: jenkins-context
current-context: jenkins-context
users:
- name: jenkins
  user:
    token: ${KUBE_TOKEN}
EOF
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    script {
                        def scannerHome = tool 'sonar'
                        sh "${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=aspu-api \
                            -Dsonar.projectName=ASPU-API \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=."
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${IMAGE_NAME}:${BUILD_NUMBER} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: "${DOCKER_CREDS}",
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                    )
                ]) {
                    sh """
                        echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
                        docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh "kubectl set image deployment/aspu-api aspu-api=${IMAGE_NAME}:${BUILD_NUMBER} -n ${KUBE_NAMESPACE}"
            }
        }
    }

    post {
        failure {
            echo "❌ Pipeline Failed!"
        }
        success {
            echo "✅ Deployment Successful!"
        }
    }
}
